// packages/db/prisma/schema.prisma
// VERSI REFAKTOR: Skema ini telah disederhanakan untuk struktur yang lebih jelas dan efektif.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//================================================================================
//  ENUMS
//================================================================================

enum Prodi {
  D3
  D4
}

enum StatusTugasAkhir {
  DRAFT
  DIAJUKAN
  DISETUJUI
  REVISI
  MENUNGGU_PEMBATALAN
  DIBATALKAN
  LULUS_TANPA_REVISI
  LULUS_DENGAN_REVISI
  SELESAI
  DITOLAK
}

enum PeranDosen {
  pembimbing1
  pembimbing2
  penguji1
  penguji2
  penguji3
  penguji4
}

enum JenisSidang {
  PROPOSAL
  AKHIR
}

enum StatusVerifikasi {
  menunggu_verifikasi
  disetujui
  ditolak
  berkas_tidak_lengkap
}

enum StatusPersetujuan {
  menunggu
  disetujui
  ditolak
}

enum StatusHasilSidang {
  menunggu_penjadwalan
  dijadwalkan
  lulus
  lulus_revisi
  tidak_lulus
}

enum StatusBimbingan {
  dijadwalkan
  ditolak
  selesai
  berjalan
  diajukan
  dibatalkan
}

enum AudiensPengumuman {
  guest
  registered_users
  all_users
  dosen
  mahasiswa
}

enum TipeDokumenBimbingan {
  bimbingan
}

enum TipeDokumenSidang {
  NASKAH_TA
  TOEIC
  RAPOR
  IJAZAH_SLTA
  BEBAS_JURUSAN
}


//================================================================================
//  MODEL INTI (User, Roles, Dosen, Mahasiswa)
//================================================================================

/// Model User merepresentasikan entitas login utama.
model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  email_verified_at DateTime?
  password          String
  photo             String?
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relasi Profil & Hak Akses
  mahasiswa           Mahasiswa?   // Profil jika user adalah mahasiswa
  dosen               Dosen?       // Profil jika user adalah dosen
  roles               Role[]       // Peran yang dimiliki user

  // Relasi Kepemilikan Data
  logs                Log[]
  pengumumanDibuat    Pengumuman[]
  tawaranTopikDibuat  TawaranTopik[]
  taDisetujui         TugasAkhir[]   @relation("Approver")
  taDitolak           TugasAkhir[]   @relation("Rejecter")
  notifikasi          NotifikasiTA[]
  emailTokens         EmailVerificationToken[]
  catatanBimbingan    CatatanBimbingan[] // Catatan yang dibuat oleh user ini

  @@map("users")
}

/// Model Role untuk implementasi hak akses seperti Spatie.
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  guard_name  String       @default("api")
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  guard_name String   @default("api")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  roles      Role[]

  @@map("permissions")
}

/// Profil khusus untuk Mahasiswa, berisi data akademik.
model Mahasiswa {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  nim        String   @unique
  prodi      Prodi
  angkatan   String
  kelas      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relasi
  user                   User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tugasAkhir             TugasAkhir?
  historyTopik           HistoryTopikMahasiswa[]
  historyPerubahanJadwal HistoryPerubahanJadwal[]

  @@map("mahasiswa")
}

/// Profil khusus untuk Dosen, berisi data akademik.
model Dosen {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  nidn       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relasi
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  peranDosenTa      PeranDosenTa[]
  bimbingan         BimbinganTA[]
  nilaiSidang       NilaiSidang[]
  dokumenValidasiP1 DokumenTa[]    @relation("ValidatorP1")
  dokumenValidasiP2 DokumenTa[]    @relation("ValidatorP2")

  @@map("dosen")
}


//================================================================================
//  MODEL TUGAS AKHIR & ALURNYA
//================================================================================

model TawaranTopik {
  id          Int       @id @default(autoincrement())
  user_id     Int
  judul_topik String
  deskripsi   String    @db.Text
  kuota       Int
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  dosenPencetus User                    @relation(fields: [user_id], references: [id])
  historyTopik  HistoryTopikMahasiswa[]
  tugasAkhir    TugasAkhir[]

  @@map("tawaran_topik")
}

model HistoryTopikMahasiswa {
  id               Int          @id @default(autoincrement())
  mahasiswa_id     Int
  tawaran_topik_id Int
  status           String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  mahasiswa    Mahasiswa    @relation(fields: [mahasiswa_id], references: [id])
  tawaranTopik TawaranTopik @relation(fields: [tawaran_topik_id], references: [id])

  @@map("history_topik_mahasiswa")
}

model TugasAkhir {
  id                Int                 @id @default(autoincrement())
  mahasiswa_id      Int                 @unique
  tawaran_topik_id  Int?
  judul             String
  status            StatusTugasAkhir    @default(DRAFT)
  tanggal_pengajuan DateTime?
  disetujui_oleh    Int?
  ditolak_oleh      Int?
  alasan_penolakan  String?             @db.Text
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt

  mahasiswa         Mahasiswa           @relation(fields: [mahasiswa_id], references: [id])
  tawaranTopik      TawaranTopik?       @relation(fields: [tawaran_topik_id], references: [id])
  approver          User?               @relation("Approver", fields: [disetujui_oleh], references: [id])
  rejecter          User?               @relation("Rejecter", fields: [ditolak_oleh], references: [id])
  peranDosenTa      PeranDosenTa[]
  bimbinganTa       BimbinganTA[]
  dokumenTa         DokumenTa[]
  sidang            Sidang[]
  pendaftaranSidang PendaftaranSidang[]
  notifikasi        NotifikasiTA[]

  @@map("tugas_akhir")
}

model PeranDosenTa {
  id             Int        @id @default(autoincrement())
  tugas_akhir_id Int
  dosen_id       Int
  peran          PeranDosen
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  tugasAkhir TugasAkhir @relation(fields: [tugas_akhir_id], references: [id], onDelete: Cascade)
  dosen      Dosen      @relation(fields: [dosen_id], references: [id])

  @@unique([tugas_akhir_id, peran])
  @@map("peran_dosen_ta")
}


//================================================================================
//  MODEL BIMBINGAN
//================================================================================

model BimbinganTA {
  id                Int           @id @default(autoincrement())
  tugas_akhir_id    Int
  dosen_id          Int
  peran             String
  sesi_ke           Int?
  tanggal_bimbingan DateTime?
  jam_bimbingan     String?
  status_bimbingan  StatusBimbingan
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  tugasAkhir         TugasAkhir                 @relation(fields: [tugas_akhir_id], references: [id], onDelete: Cascade)
  dosen              Dosen                      @relation(fields: [dosen_id], references: [id])
  catatan            CatatanBimbingan[]
  historyPerubahan   HistoryPerubahanJadwal[]

  @@map("bimbingan_ta")
}

model CatatanBimbingan {
  id              Int       @id @default(autoincrement())
  bimbingan_ta_id Int
  author_id       Int
  catatan         String    @db.Text
  author_type     String // "Mahasiswa" atau "Dosen"
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  bimbinganTa BimbinganTA @relation(fields: [bimbingan_ta_id], references: [id], onDelete: Cascade)
  author      User        @relation(fields: [author_id], references: [id])

  @@map("catatan_bimbingan")
}

model HistoryPerubahanJadwal {
  id               Int         @id @default(autoincrement())
  bimbingan_ta_id  Int
  mahasiswa_id     Int
  tanggal_lama     DateTime?
  jam_lama         String?
  tanggal_baru     DateTime?
  jam_baru         String?
  alasan_perubahan String?     @db.Text
  status           String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  bimbingan BimbinganTA @relation(fields: [bimbingan_ta_id], references: [id], onDelete: Cascade)
  mahasiswa Mahasiswa   @relation(fields: [mahasiswa_id], references: [id])

  @@map("history_perubahan_jadwal")
}


//================================================================================
//  MODEL SIDANG & PENDAFTARAN
//================================================================================

model PendaftaranSidang {
  id                    Int                @id @default(autoincrement())
  tugas_akhir_id        Int
  status_verifikasi     StatusVerifikasi   @default(menunggu_verifikasi)
  status_pembimbing_1   StatusPersetujuan  @default(menunggu)
  status_pembimbing_2   StatusPersetujuan  @default(menunggu)
  catatan_admin         String?            @db.Text
  catatan_pembimbing_1  String?            @db.Text
  catatan_pembimbing_2  String?            @db.Text
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  tugasAkhir TugasAkhir               @relation(fields: [tugas_akhir_id], references: [id])
  sidang     Sidang?
  files      PendaftaranSidangFile[]

  @@map("pendaftaran_sidang")
}

model PendaftaranSidangFile {
  id                    Int               @id @default(autoincrement())
  pendaftaran_sidang_id Int
  file_path             String
  original_name         String
  tipe_dokumen          TipeDokumenSidang
  created_at            DateTime          @default(now())

  pendaftaran PendaftaranSidang @relation(fields: [pendaftaran_sidang_id], references: [id], onDelete: Cascade)

  @@map("pendaftaran_sidang_files")
}

model Sidang {
  id                    Int              @id @default(autoincrement())
  tugas_akhir_id        Int
  pendaftaran_sidang_id Int?             @unique
  jenis_sidang          JenisSidang
  status_hasil          StatusHasilSidang @default(menunggu_penjadwalan)
  is_active             Boolean          @default(true)
  deleted_at            DateTime?
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt

  tugasAkhir        TugasAkhir         @relation(fields: [tugas_akhir_id], references: [id])
  pendaftaranSidang PendaftaranSidang? @relation(fields: [pendaftaran_sidang_id], references: [id])
  jadwalSidang      JadwalSidang[]
  nilaiSidang       NilaiSidang[]

  @@map("sidang")
}

model JadwalSidang {
  id            Int      @id @default(autoincrement())
  sidang_id     Int
  tanggal       DateTime
  waktu_mulai   String
  waktu_selesai String
  ruangan_id    Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  sidang  Sidang  @relation(fields: [sidang_id], references: [id], onDelete: Cascade)
  ruangan Ruangan @relation(fields: [ruangan_id], references: [id])

  @@map("jadwal_sidang")
}

model Ruangan {
  id           Int      @id @default(autoincrement())
  nama_ruangan String
  lokasi       String?
  kapasitas    Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  jadwalSidang JadwalSidang[]

  @@map("ruangan")
}

model NilaiSidang {
  id         Int      @id @default(autoincrement())
  sidang_id  Int
  dosen_id   Int
  aspek      String
  komentar   String?  @db.Text
  skor       Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sidang Sidang @relation(fields: [sidang_id], references: [id], onDelete: Cascade)
  dosen  Dosen  @relation(fields: [dosen_id], references: [id])

  @@map("nilai_sidang")
}


//================================================================================
//  MODEL UTILITAS (Dokumen, Log, dll)
//================================================================================

model DokumenTa {
  id                 Int                  @id @default(autoincrement())
  tugas_akhir_id     Int
  tipe_dokumen       TipeDokumenBimbingan
  status_validasi    String               @default("menunggu")
  divalidasi_oleh_p1 Int?
  divalidasi_oleh_p2 Int?
  file_path          String
  version            Int
  deleted_at         DateTime?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt

  tugasAkhir  TugasAkhir @relation(fields: [tugas_akhir_id], references: [id], onDelete: Cascade)
  validatorP1 Dosen?     @relation("ValidatorP1", fields: [divalidasi_oleh_p1], references: [id])
  validatorP2 Dosen?     @relation("ValidatorP2", fields: [divalidasi_oleh_p2], references: [id])

  @@map("dokumen_ta")
}

model Pengumuman {
  id             Int               @id @default(autoincrement())
  judul          String
  isi            String            @db.Text
  dibuat_oleh    Int
  audiens        AudiensPengumuman
  tanggal_dibuat DateTime
  deleted_at     DateTime?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt

  pembuat User @relation(fields: [dibuat_oleh], references: [id])

  @@map("pengumuman")
}

model Log {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  action      String
  ip_address  String?
  user_agent  String?  @db.Text
  url         String?  @db.Text
  method      String?
  created_at  DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id])

  @@map("logs")
}

model EmailVerificationToken {
  email      String   @unique
  token      String   @unique
  created_at DateTime @default(now())

  user User @relation(fields: [email], references: [email])

  @@map("email_verification_tokens")
}

model NotifikasiTA {
  id             Int      @id @default(autoincrement())
  user_id        Int
  tugas_akhir_id Int
  pesan          String
  is_read        Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user       User       @relation(fields: [user_id], references: [id])
  tugasAkhir TugasAkhir @relation(fields: [tugas_akhir_id], references: [id])

  @@map("notifikasi_ta")
}
